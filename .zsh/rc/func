# Backup homedir

_backup_to()
{
	(HST=$1;
	 USR=$2;
	 DIR=$3;
         cd; rsync -avz --backup --suffix .rsyncbak\
                   --delete --delete-excluded --delete-after\
                   --stats --exclude-from=${HOME}/.rsync-exclude\
                   -e /usr/bin/ssh . ${USR}@${HST}:${DIR})
}

_restore_from()
{
	(HST=$1;
	 USR=$2;
	 DIR=$3;
	 cd; rsync -avz --delete --delete-after\
	           --stats -e /usr/bin/ssh ${USR}@${HST}:${DIR} .)
}

backup_to_aloha()
{
	_backup_to "aloha" "eric" "/home/eric/backupibook" 
}

backup_to_oahu()
{
	_backup_to "oahu" "eric" "/home/eric/backupibook" 
}

restore_from_aloha()
{
	# trailing / is important!
	_restore_from "aloha" "eric" "/home/eric/backupibook/"
}

# Network configuration stuff

ifu()
{
	if [[ $# -lt 2 ]] {
	  printf "too few args\n" 
	  return
	}

	if [[ $1 == 'eth' ]] {
	  phy=eth0
	  log=eth-$2
	  if [[ $2 == 'sun' ]] {
	    log=eth-dhcp
	    bk=backup_to_sun
	  }
	} elif [[ $1 == 'wifi' ]] {
	  phy=eth1 
	  log=wifi-$2
	} else {
	  printf "$1: bad arg\n" 
	  return
	}

	sudo ifup $phy=$log
	if [[ ! -z $bk ]] { $bk }

	unset phy
	unset log
	unset bk
}

ifd()
{
	if [[ $# -lt 1 ]] {
	  printf "too few args\n"
	  return
	}

	if [[ $1 == 'eth' ]] {
	  phy=eth0
	} elif [[ $1 == 'wifi' ]] {
	  phy=eth1
	} else {
	  printf "$1: bad arg\n" 
	  return
	}

	sudo ifdown $phy

	unset phy
}

# _mntf_main is used by mntf alias (see .zsh/rc/alias)

_mntf_mount_error()
{
	printf "failed to mount /cflash!\n"
	printf "scsi_sc may have not detected usb_storage dev yet...\n"
}

_mntf()
{
	flag=yes
	while ! /bin/mount /cflash > /dev/null 2>&1; do

		if [[ $flag == 'yes' ]] {
			_mntf_mount_error
			flag=no
		}

		printf "waiting...\n"
		sleep 1;
	done

	printf "done.\n"
}
